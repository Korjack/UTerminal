<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>Exe</OutputType>
        <!--If you are willing to use Windows/MacOS native APIs you will need to create 3 projects.
        One for Windows with net8.0-windows TFM, one for MacOS with net8.0-macos and one with net8.0 TFM for Linux.-->
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <BuiltInComInteropSupport>true</BuiltInComInteropSupport>        
    </PropertyGroup>

    <PropertyGroup>
        <ApplicationManifest>app.manifest</ApplicationManifest>
    </PropertyGroup>

    <!-- 공통 Release 설정 -->
    <PropertyGroup Condition="'$(Configuration)' == 'Release'">
        <PublishSingleFile>true</PublishSingleFile>
        <SelfContained>true</SelfContained>
        <DebugType>embedded</DebugType>
        <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
        <EnableCompressionInSingleFile>true</EnableCompressionInSingleFile>        
    </PropertyGroup>

    <!-- Windows 배포 설정 -->
    <PropertyGroup Condition="'$(Configuration)' == 'Release' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))'">
        <OutputType>WinExe</OutputType>
        <RuntimeIdentifier>win-x64</RuntimeIdentifier>
    </PropertyGroup>

    <!-- macOS Release 설정 -->
    <PropertyGroup Condition="'$(Configuration)' == 'Release' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))'">
        <RuntimeIdentifier>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLower().Contains('arm64') ? 'osx-arm64' : 'osx-x64')</RuntimeIdentifier>        
        <UseAppHost>true</UseAppHost>
    </PropertyGroup>

    <!-- Linux Release 설정 -->
    <PropertyGroup Condition="'$(Configuration)' == 'Release' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))'">
        <RuntimeIdentifier>linux-$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLower())</RuntimeIdentifier>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Avalonia.AvaloniaEdit" Version="11.1.0" />
        <PackageReference Include="Avalonia.Desktop" Version="$(AvaloniaVersion)"/>
        <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
        <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="$(AvaloniaVersion)"/>
        <PackageReference Include="Avalonia.Xaml.Behaviors" Version="11.2.0.7" />
        <PackageReference Include="log4net" Version="3.0.3"/>
        <PackageReference Include="System.IO.Ports" Version="9.0.0" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\UTerminal\UTerminal.csproj"/>
    </ItemGroup>
</Project>
